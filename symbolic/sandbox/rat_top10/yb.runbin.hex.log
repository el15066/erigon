<SSAFunction name:_dispatch hash:0x0 offset:0x0 num_blocks:1 blocks:<SSABasicBlock offset:0x0 num_insns:5 in: [] insns:[
	<0x4: MSTORE(#40, #80)>
	<0x7: %3 = CALLDATASIZE()>
	<0x8: %4 = LT(%3, #4)>
	<0xc: JUMPI(#af, %4)>
	<0xc: ICALL(_fallthrough)>
] fallthrough:None jumps:[0xaf]>>

<SSAFunction name:transferFrom(address,address,uint256) hash:0x23b872dd offset:0x1e1 num_blocks:11 blocks:<SSABasicBlock offset:0x1e1 num_insns:3 in: [] insns:[
	<0x1e2: %139 = CALLVALUE()>
	<0x1e4: %140 = ISZERO(%139)>
	<0x1e8: JUMPI(#1ed, %140)>
] fallthrough:0x1e9 jumps:[0x1ed]>
<SSABasicBlock offset:0x1e9 num_insns:1 in: [0x1e1] insns:[
	<0x1ec: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x1ed num_insns:4 in: [0x1e1] insns:[
	<0x1fc: %148 = CALLDATALOAD(#4)    // ADDRESS>
	<0x21c: %153 = CALLDATALOAD(#24)    // ADDRESS>
	<0x23c: %158 = CALLDATALOAD(#44)>
	<0x24b: JUMP(#72b)>
] fallthrough:None jumps:[0x72b]>
<SSABasicBlock offset:0x24c num_insns:8 in: [0x99d] insns:[
	<0x24f: %163 = MLOAD(#40)>
	<0x252: %164 = ISZERO(%1000)>
	<0x255: %167 = ISZERO(%164)>
	<0x257: MSTORE(%163, %167)>
	<0x25a: %169 = ADD(#20, %163)>
	<0x260: %171 = MLOAD(#40)>
	<0x263: %172 = SUB(%169, %171)>
	<0x265: RETURN(%171, %172)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x72b num_insns:7 in: [0x1ed] insns:[
	<0x760: MSTORE(#0, %148)>
	<0x766: MSTORE(#20, #0)>
	<0x76c: %528 = SHA3(#0, #40)>
	<0x76d: %529 = SLOAD(%528)>
	<0x76e: %530 = LT(%529, %158)>
	<0x76f: %531 = ISZERO(%530)>
	<0x775: JUMPI(#7f7, %530)>
] fallthrough:0x776 jumps:[0x7f7]>
<SSABasicBlock offset:0x776 num_insns:10 in: [0x72b] insns:[
	<0x7aa: MSTORE(#0, %148)>
	<0x7b0: MSTORE(#20, #1)>
	<0x7b6: %545 = SHA3(#0, #40)>
	<0x7b9: %547 = CALLER()    // ADDRESS>
	<0x7e7: MSTORE(#0, %547)>
	<0x7ed: MSTORE(#20, %545)>
	<0x7f3: %557 = SHA3(#0, #40)>
	<0x7f4: %558 = SLOAD(%557)>
	<0x7f5: %559 = LT(%558, %158)>
	<0x7f6: %560 = ISZERO(%559)>
] fallthrough:0x7f7 jumps:None>
<SSABasicBlock offset:0x7f7 num_insns:3 in: [0x72b,0x776] insns:[
	<0x7f7: %1008 = PHI(%560, %531)>
	<0x7f9: %561 = ISZERO(%1008)>
	<0x7fd: JUMPI(#803, %561)>
] fallthrough:0x7fe jumps:[0x803]>
<SSABasicBlock offset:0x7fe num_insns:1 in: [0x7f7] insns:[
	<0x802: %564 = GT(%158, #0)>
] fallthrough:0x803 jumps:None>
<SSABasicBlock offset:0x803 num_insns:3 in: [0x7fe,0x7f7] insns:[
	<0x803: %1009 = PHI(%564, %1008)>
	<0x804: %565 = ISZERO(%1009)>
	<0x808: JUMPI(#998, %565)>
] fallthrough:0x809 jumps:[0x99d]>
<SSABasicBlock offset:0x809 num_insns:29 in: [0x803] insns:[
	<0x83b: MSTORE(#0, %153)>
	<0x841: MSTORE(#20, #0)>
	<0x847: %577 = SHA3(#0, #40)>
	<0x84c: %579 = SLOAD(%577)>
	<0x84d: %580 = ADD(%579, %158)>
	<0x853: SSTORE(%577, %580)>
	<0x887: MSTORE(#0, %148)>
	<0x88d: MSTORE(#20, #0)>
	<0x893: %591 = SHA3(#0, #40)>
	<0x898: %593 = SLOAD(%591)>
	<0x899: %594 = SUB(%593, %158)>
	<0x89f: SSTORE(%591, %594)>
	<0x8d4: MSTORE(#0, %148)>
	<0x8da: MSTORE(#20, #1)>
	<0x8e0: %606 = SHA3(#0, #40)>
	<0x8e3: %608 = CALLER()    // ADDRESS>
	<0x911: MSTORE(#0, %608)>
	<0x917: MSTORE(#20, %606)>
	<0x91d: %618 = SHA3(#0, #40)>
	<0x922: %620 = SLOAD(%618)>
	<0x923: %621 = SUB(%620, %158)>
	<0x929: SSTORE(%618, %621)>
	<0x97d: %628 = MLOAD(#40)>
	<0x981: MSTORE(%628, %158)>
	<0x984: %630 = ADD(#20, %628)>
	<0x98a: %632 = MLOAD(#40)>
	<0x98d: %633 = SUB(%630, %632)>
	<0x98f: LOG3(%632, %633, #ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, %148, %153)>
	<0x997: JUMP(#99d)>
] fallthrough:None jumps:[0x99d]>
<SSABasicBlock offset:0x99d num_insns:2 in: [0x809,0x803] insns:[
	<0x99d: %1000 = PHI(#0, #1)>
	<0x9a3: JUMP(#24c)>
] fallthrough:None jumps:[0x24c]>>

<SSAFunction name:symbol() hash:0x95d89b41 offset:0x37e num_blocks:13 blocks:<SSABasicBlock offset:0x37e num_insns:3 in: [] insns:[
	<0x37f: %259 = CALLVALUE()>
	<0x381: %260 = ISZERO(%259)>
	<0x385: JUMPI(#38a, %260)>
] fallthrough:0x386 jumps:[0xa9d]>
<SSABasicBlock offset:0x386 num_insns:1 in: [0x37e] insns:[
	<0x389: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x393 num_insns:9 in: [0xaf5,0xb16,0xa9d] insns:[
	<0x396: %266 = MLOAD(#40)>
	<0x39b: %268 = ADD(#20, %266)>
	<0x39e: %269 = SUB(%268, %266)>
	<0x3a0: MSTORE(%266, %269)>
	<0x3a4: %270 = MLOAD(%742)>
	<0x3a6: MSTORE(%268, %270)>
	<0x3a9: %272 = ADD(#20, %268)>
	<0x3ad: %273 = MLOAD(%742)>
	<0x3b1: %275 = ADD(#20, %742)>
] fallthrough:0x3b8 jumps:None>
<SSABasicBlock offset:0x3b8 num_insns:4 in: [0x3c1,0x393] insns:[
	<0x3b8: %1003 = PHI(%284, #0)>
	<0x3bb: %277 = LT(%1003, %273)>
	<0x3bc: %278 = ISZERO(%277)>
	<0x3c0: JUMPI(#3d3, %278)>
] fallthrough:0x3c1 jumps:[0x3d3]>
<SSABasicBlock offset:0x3c1 num_insns:6 in: [0x3b8] insns:[
	<0x3c3: %280 = ADD(%275, %1003)>
	<0x3c4: %281 = MLOAD(%280)>
	<0x3c7: %282 = ADD(%272, %1003)>
	<0x3c8: MSTORE(%282, %281)>
	<0x3cc: %284 = ADD(%1003, #20)>
	<0x3d2: JUMP(#3b8)>
] fallthrough:None jumps:[0x3b8]>
<SSABasicBlock offset:0x3d3 num_insns:4 in: [0x3b8] insns:[
	<0x3dc: %286 = ADD(%273, %272)>
	<0x3e0: %288 = AND(#1f, %273)>
	<0x3e2: %289 = ISZERO(%288)>
	<0x3e6: JUMPI(#400, %289)>
] fallthrough:0x3e7 jumps:[0x400]>
<SSABasicBlock offset:0x3e7 num_insns:9 in: [0x3d3] insns:[
	<0x3e9: %291 = SUB(%286, %288)>
	<0x3eb: %292 = MLOAD(%291)>
	<0x3f1: %295 = SUB(#20, %288)>
	<0x3f5: %297 = EXP(#100, %295)>
	<0x3f6: %298 = SUB(%297, #1)>
	<0x3f7: %299 = NOT(%298)>
	<0x3f8: %300 = AND(%299, %292)>
	<0x3fa: MSTORE(%291, %300)>
	<0x3fd: %302 = ADD(#20, %291)>
] fallthrough:0x400 jumps:None>
<SSABasicBlock offset:0x400 num_insns:4 in: [0x3d3,0x3e7] insns:[
	<0x400: %1004 = PHI(%302, %286)>
	<0x408: %304 = MLOAD(#40)>
	<0x40b: %305 = SUB(%1004, %304)>
	<0x40d: RETURN(%304, %305)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xa9d num_insns:25 in: [0x37e] insns:[
	<0xaa1: %723 = SLOAD(#5)>
	<0xaa7: %726 = AND(#1, %723)>
	<0xaa8: %727 = ISZERO(%726)>
	<0xaac: %729 = MUL(#100, %727)>
	<0xaad: %730 = SUB(%729, #1)>
	<0xaae: %731 = AND(%730, %723)>
	<0xab2: %733 = DIV(%731, #2)>
	<0xab6: %735 = ADD(#1f, %733)>
	<0xabb: %737 = DIV(%735, #20)>
	<0xabc: %738 = MUL(%737, #20)>
	<0xabf: %740 = ADD(#20, %738)>
	<0xac2: %742 = MLOAD(#40)>
	<0xac5: %743 = ADD(%742, %740)>
	<0xac8: MSTORE(#40, %743)>
	<0xacf: MSTORE(%742, %733)>
	<0xad2: %746 = ADD(#20, %742)>
	<0xad5: %747 = SLOAD(#5)>
	<0xadb: %750 = AND(#1, %747)>
	<0xadc: %751 = ISZERO(%750)>
	<0xae0: %753 = MUL(#100, %751)>
	<0xae1: %754 = SUB(%753, #1)>
	<0xae2: %755 = AND(%754, %747)>
	<0xae6: %757 = DIV(%755, #2)>
	<0xae8: %758 = ISZERO(%757)>
	<0xaec: JUMPI(#b33, %758)>
] fallthrough:0xaed jumps:[0x393]>
<SSABasicBlock offset:0xaed num_insns:2 in: [0xa9d] insns:[
	<0xaf0: %761 = LT(#1f, %757)>
	<0xaf4: JUMPI(#b08, %761)>
] fallthrough:0xaf5 jumps:[0xb08]>
<SSABasicBlock offset:0xaf5 num_insns:5 in: [0xaed] insns:[
	<0xafa: %764 = SLOAD(#5)>
	<0xafb: %765 = DIV(%764, #100)>
	<0xafc: %766 = MUL(%765, #100)>
	<0xafe: MSTORE(%746, %766)>
	<0xb07: JUMP(#b33)>
] fallthrough:None jumps:[0x393]>
<SSABasicBlock offset:0xb08 num_insns:3 in: [0xaed] insns:[
	<0xb0a: %770 = ADD(%746, %757)>
	<0xb0f: MSTORE(#0, #5)>
	<0xb14: %774 = SHA3(#0, #20)>
] fallthrough:0xb16 jumps:None>
<SSABasicBlock offset:0xb16 num_insns:8 in: [0xb16,0xb08] insns:[
	<0xb16: %1012 = PHI(%774, %777)>
	<0xb16: %1013 = PHI(%746, %779)>
	<0xb18: %775 = SLOAD(%1012)>
	<0xb1a: MSTORE(%1013, %775)>
	<0xb1e: %777 = ADD(#1, %1012)>
	<0xb22: %779 = ADD(#20, %1013)>
	<0xb25: %780 = GT(%770, %779)>
	<0xb29: JUMPI(#b16, %780)>
] fallthrough:0x393 jumps:[0xb16]>>

<SSAFunction name:transfer(address,uint256) hash:0xa9059cbb offset:0x40e num_blocks:9 blocks:<SSABasicBlock offset:0x40e num_insns:3 in: [] insns:[
	<0x40f: %306 = CALLVALUE()>
	<0x411: %307 = ISZERO(%306)>
	<0x415: JUMPI(#41a, %307)>
] fallthrough:0x416 jumps:[0x41a]>
<SSABasicBlock offset:0x416 num_insns:1 in: [0x40e] insns:[
	<0x419: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x41a num_insns:3 in: [0x40e] insns:[
	<0x429: %315 = CALLDATALOAD(#4)    // ADDRESS>
	<0x449: %320 = CALLDATALOAD(#24)>
	<0x458: JUMP(#b3b)>
] fallthrough:None jumps:[0xb3b]>
<SSABasicBlock offset:0x459 num_insns:8 in: [0xc9b] insns:[
	<0x45c: %325 = MLOAD(#40)>
	<0x45f: %326 = ISZERO(%1005)>
	<0x462: %329 = ISZERO(%326)>
	<0x464: MSTORE(%325, %329)>
	<0x467: %331 = ADD(#20, %325)>
	<0x46d: %333 = MLOAD(#40)>
	<0x470: %334 = SUB(%331, %333)>
	<0x472: RETURN(%333, %334)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xb3b num_insns:8 in: [0x41a] insns:[
	<0xb42: %788 = CALLER()    // ADDRESS>
	<0xb70: MSTORE(#0, %788)>
	<0xb76: MSTORE(#20, #0)>
	<0xb7c: %798 = SHA3(#0, #40)>
	<0xb7d: %799 = SLOAD(%798)>
	<0xb7e: %800 = LT(%799, %320)>
	<0xb7f: %801 = ISZERO(%800)>
	<0xb85: JUMPI(#b8b, %800)>
] fallthrough:0xb86 jumps:[0xb8b]>
<SSABasicBlock offset:0xb86 num_insns:1 in: [0xb3b] insns:[
	<0xb8a: %805 = GT(%320, #0)>
] fallthrough:0xb8b jumps:None>
<SSABasicBlock offset:0xb8b num_insns:3 in: [0xb86,0xb3b] insns:[
	<0xb8b: %1014 = PHI(%805, %801)>
	<0xb8c: %806 = ISZERO(%1014)>
	<0xb90: JUMPI(#c96, %806)>
] fallthrough:0xb91 jumps:[0xc9b]>
<SSABasicBlock offset:0xb91 num_insns:21 in: [0xb8b] insns:[
	<0xb95: %809 = CALLER()    // ADDRESS>
	<0xbc3: MSTORE(#0, %809)>
	<0xbc9: MSTORE(#20, #0)>
	<0xbcf: %819 = SHA3(#0, #40)>
	<0xbd4: %821 = SLOAD(%819)>
	<0xbd5: %822 = SUB(%821, %320)>
	<0xbdb: SSTORE(%819, %822)>
	<0xc0f: MSTORE(#0, %315)>
	<0xc15: MSTORE(#20, #0)>
	<0xc1b: %833 = SHA3(#0, #40)>
	<0xc20: %835 = SLOAD(%833)>
	<0xc21: %836 = ADD(%835, %320)>
	<0xc27: SSTORE(%833, %836)>
	<0xc40: %839 = CALLER()    // ADDRESS>
	<0xc7b: %844 = MLOAD(#40)>
	<0xc7f: MSTORE(%844, %320)>
	<0xc82: %846 = ADD(#20, %844)>
	<0xc88: %848 = MLOAD(#40)>
	<0xc8b: %849 = SUB(%846, %848)>
	<0xc8d: LOG3(%848, %849, #ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, %839, %315)>
	<0xc95: JUMP(#c9b)>
] fallthrough:None jumps:[0xc9b]>
<SSABasicBlock offset:0xc9b num_insns:2 in: [0xb91,0xb8b] insns:[
	<0xc9b: %1005 = PHI(#1, #0)>
	<0xca0: JUMP(#459)>
] fallthrough:None jumps:[0x459]>>

<SSAFunction name:totalSupply() hash:0x18160ddd offset:0x1b6 num_blocks:4 blocks:<SSABasicBlock offset:0x1b6 num_insns:3 in: [] insns:[
	<0x1b7: %126 = CALLVALUE()>
	<0x1b9: %127 = ISZERO(%126)>
	<0x1bd: JUMPI(#1c2, %127)>
] fallthrough:0x1be jumps:[0x725]>
<SSABasicBlock offset:0x1be num_insns:1 in: [0x1b6] insns:[
	<0x1c1: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x1cb num_insns:6 in: [0x725] insns:[
	<0x1ce: %133 = MLOAD(#40)>
	<0x1d2: MSTORE(%133, %516)>
	<0x1d5: %135 = ADD(#20, %133)>
	<0x1db: %137 = MLOAD(#40)>
	<0x1de: %138 = SUB(%135, %137)>
	<0x1e0: RETURN(%137, %138)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x725 num_insns:2 in: [0x1b6] insns:[
	<0x728: %516 = SLOAD(#2)>
	<0x72a: JUMP(#1cb)>
] fallthrough:None jumps:[0x1cb]>>

<SSAFunction name:approveAndCall(address,uint256,bytes) hash:0xcae9ca51 offset:0x473 num_blocks:11 blocks:<SSABasicBlock offset:0x473 num_insns:3 in: [] insns:[
	<0x474: %335 = CALLVALUE()>
	<0x476: %336 = ISZERO(%335)>
	<0x47a: JUMPI(#47f, %336)>
] fallthrough:0x47b jumps:[0x47f]>
<SSABasicBlock offset:0x47b num_insns:1 in: [0x473] insns:[
	<0x47e: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x47f num_insns:17 in: [0x473] insns:[
	<0x48e: %344 = CALLDATALOAD(#4)    // ADDRESS>
	<0x4ae: %349 = CALLDATALOAD(#24)>
	<0x4b8: %352 = CALLDATALOAD(#44)>
	<0x4bf: %355 = ADD(#4, %352)>
	<0x4c1: %356 = CALLDATALOAD(%355)>
	<0x4c5: %358 = ADD(#20, %355)>
	<0x4cb: %360 = ADD(#1f, %356)>
	<0x4d0: %362 = DIV(%360, #20)>
	<0x4d1: %363 = MUL(%362, #20)>
	<0x4d4: %365 = ADD(#20, %363)>
	<0x4d7: %367 = MLOAD(#40)>
	<0x4da: %368 = ADD(%367, %365)>
	<0x4dd: MSTORE(#40, %368)>
	<0x4e5: MSTORE(%367, %356)>
	<0x4e8: %371 = ADD(#20, %367)>
	<0x4ee: CALLDATACOPY(%371, %358, %356)>
	<0x503: JUMP(#ca1)>
] fallthrough:None jumps:[0xca1]>
<SSABasicBlock offset:0x504 num_insns:8 in: [0xf0f] insns:[
	<0x507: %375 = MLOAD(#40)>
	<0x50a: %376 = ISZERO(#1)>
	<0x50d: %379 = ISZERO(%376)>
	<0x50f: MSTORE(%375, %379)>
	<0x512: %381 = ADD(#20, %375)>
	<0x518: %383 = MLOAD(#40)>
	<0x51b: %384 = SUB(%381, %383)>
	<0x51d: RETURN(%383, %384)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xca1 num_insns:41 in: [0x47f] insns:[
	<0xca9: %856 = CALLER()    // ADDRESS>
	<0xcd7: MSTORE(#0, %856)>
	<0xcdd: MSTORE(#20, #1)>
	<0xce3: %866 = SHA3(#0, #40)>
	<0xd14: MSTORE(#0, %344)>
	<0xd1a: MSTORE(#20, %866)>
	<0xd20: %877 = SHA3(#0, #40)>
	<0xd23: SSTORE(%877, %349)>
	<0xd3c: %880 = CALLER()    // ADDRESS>
	<0xd77: %885 = MLOAD(#40)>
	<0xd7b: MSTORE(%885, %349)>
	<0xd7e: %887 = ADD(#20, %885)>
	<0xd84: %889 = MLOAD(#40)>
	<0xd87: %890 = SUB(%887, %889)>
	<0xd89: LOG3(%889, %890, #8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, %880, %344)>
	<0xda3: %894 = MLOAD(#40)>
	<0xdc8: MSTORE(%894, #72656365697665417070726f76616c28616464726573732c75696e743235362c)>
	<0xdcb: %897 = ADD(#20, %894)>
	<0xdee: MSTORE(%897, #616464726573732c627974657329000000000000000000000000000000000000)>
	<0xdf2: %900 = ADD(#2e, %894)>
	<0xdf7: %902 = MLOAD(#40)>
	<0xdfa: %903 = SUB(%900, %902)>
	<0xdfc: %904 = SHA3(%902, %903)>
	<0xe1c: %906 = DIV(%904, #100000000000000000000000000000000000000000000000000000000)>
	<0xe1d: %907 = CALLER()    // ADDRESS>
	<0xe1f: %908 = ADDRESS()>
	<0xe23: %910 = MLOAD(#40)>
	<0xe2a: %912 = AND(#ffffffff, %906)>
	<0xe49: %914 = MUL(#100000000000000000000000000000000000000000000000000000000, %912)>
	<0xe4b: MSTORE(%910, %914)>
	<0xe4e: %916 = ADD(#4, %910)>
	<0xe7e: MSTORE(%916, %907)>
	<0xe81: %922 = ADD(#20, %916)>
	<0xe84: MSTORE(%922, %349)>
	<0xe87: %924 = ADD(#20, %922)>
	<0xe9e: %926 = AND(#ffffffffffffffffffffffffffffffffffffffff, %908)>
	<0xeb4: %928 = AND(#ffffffffffffffffffffffffffffffffffffffff, %926)>
	<0xeb6: MSTORE(%924, %928)>
	<0xeb9: %930 = ADD(#20, %924)>
	<0xebc: %931 = MLOAD(%367)>
	<0xec0: %933 = ADD(#20, %367)>
] fallthrough:0xec7 jumps:None>
<SSABasicBlock offset:0xec7 num_insns:4 in: [0xed0,0xca1] insns:[
	<0xec7: %1015 = PHI(%942, #0)>
	<0xeca: %935 = LT(%1015, %931)>
	<0xecb: %936 = ISZERO(%935)>
	<0xecf: JUMPI(#ee2, %936)>
] fallthrough:0xed0 jumps:[0xee2]>
<SSABasicBlock offset:0xed0 num_insns:6 in: [0xec7] insns:[
	<0xed2: %938 = ADD(%933, %1015)>
	<0xed3: %939 = MLOAD(%938)>
	<0xed6: %940 = ADD(%930, %1015)>
	<0xed7: MSTORE(%940, %939)>
	<0xedb: %942 = ADD(%1015, #20)>
	<0xee1: JUMP(#ec7)>
] fallthrough:None jumps:[0xec7]>
<SSABasicBlock offset:0xee2 num_insns:4 in: [0xec7] insns:[
	<0xeeb: %944 = ADD(%931, %930)>
	<0xeef: %946 = AND(#1f, %931)>
	<0xef1: %947 = ISZERO(%946)>
	<0xef5: JUMPI(#f0f, %947)>
] fallthrough:0xef6 jumps:[0xf0f]>
<SSABasicBlock offset:0xef6 num_insns:9 in: [0xee2] insns:[
	<0xef8: %949 = SUB(%944, %946)>
	<0xefa: %950 = MLOAD(%949)>
	<0xf00: %953 = SUB(#20, %946)>
	<0xf04: %955 = EXP(#100, %953)>
	<0xf05: %956 = SUB(%955, #1)>
	<0xf06: %957 = NOT(%956)>
	<0xf07: %958 = AND(%957, %950)>
	<0xf09: MSTORE(%949, %958)>
	<0xf0c: %960 = ADD(#20, %949)>
] fallthrough:0xf0f jumps:None>
<SSABasicBlock offset:0xf0f num_insns:8 in: [0xee2,0xef6] insns:[
	<0xf0f: %1016 = PHI(%960, %944)>
	<0xf1b: %963 = MLOAD(#40)>
	<0xf1e: %964 = SUB(%1016, %963)>
	<0xf23: %966 = GAS()>
	<0xf24: %967 = CALL(%966, %344, #0, %963, %964, %963, #0)>
	<0xf29: %968 = ISZERO(%967)>
	<0xf2a: %969 = ISZERO(%968)>
	<0xf2e: JUMPI(#f33, %969)>
] fallthrough:0xf2f jumps:[0x504]>
<SSABasicBlock offset:0xf2f num_insns:1 in: [0xf0f] insns:[
	<0xf32: REVERT(#0, #0)>
] fallthrough:None jumps:None>>

<SSAFunction name:version() hash:0x54fd4d50 offset:0x297 num_blocks:13 blocks:<SSABasicBlock offset:0x297 num_insns:3 in: [] insns:[
	<0x298: %190 = CALLVALUE()>
	<0x29a: %191 = ISZERO(%190)>
	<0x29e: JUMPI(#2a3, %191)>
] fallthrough:0x29f jumps:[0x9b7]>
<SSABasicBlock offset:0x29f num_insns:1 in: [0x297] insns:[
	<0x2a2: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x2ac num_insns:9 in: [0xa30,0x9b7,0xa0f] insns:[
	<0x2af: %197 = MLOAD(#40)>
	<0x2b4: %199 = ADD(#20, %197)>
	<0x2b7: %200 = SUB(%199, %197)>
	<0x2b9: MSTORE(%197, %200)>
	<0x2bd: %201 = MLOAD(%665)>
	<0x2bf: MSTORE(%199, %201)>
	<0x2c2: %203 = ADD(#20, %199)>
	<0x2c6: %204 = MLOAD(%665)>
	<0x2ca: %206 = ADD(#20, %665)>
] fallthrough:0x2d1 jumps:None>
<SSABasicBlock offset:0x2d1 num_insns:4 in: [0x2ac,0x2da] insns:[
	<0x2d1: %1001 = PHI(#0, %215)>
	<0x2d4: %208 = LT(%1001, %204)>
	<0x2d5: %209 = ISZERO(%208)>
	<0x2d9: JUMPI(#2ec, %209)>
] fallthrough:0x2da jumps:[0x2ec]>
<SSABasicBlock offset:0x2da num_insns:6 in: [0x2d1] insns:[
	<0x2dc: %211 = ADD(%206, %1001)>
	<0x2dd: %212 = MLOAD(%211)>
	<0x2e0: %213 = ADD(%203, %1001)>
	<0x2e1: MSTORE(%213, %212)>
	<0x2e5: %215 = ADD(%1001, #20)>
	<0x2eb: JUMP(#2d1)>
] fallthrough:None jumps:[0x2d1]>
<SSABasicBlock offset:0x2ec num_insns:4 in: [0x2d1] insns:[
	<0x2f5: %217 = ADD(%204, %203)>
	<0x2f9: %219 = AND(#1f, %204)>
	<0x2fb: %220 = ISZERO(%219)>
	<0x2ff: JUMPI(#319, %220)>
] fallthrough:0x300 jumps:[0x319]>
<SSABasicBlock offset:0x300 num_insns:9 in: [0x2ec] insns:[
	<0x302: %222 = SUB(%217, %219)>
	<0x304: %223 = MLOAD(%222)>
	<0x30a: %226 = SUB(#20, %219)>
	<0x30e: %228 = EXP(#100, %226)>
	<0x30f: %229 = SUB(%228, #1)>
	<0x310: %230 = NOT(%229)>
	<0x311: %231 = AND(%230, %223)>
	<0x313: MSTORE(%222, %231)>
	<0x316: %233 = ADD(#20, %222)>
] fallthrough:0x319 jumps:None>
<SSABasicBlock offset:0x319 num_insns:4 in: [0x300,0x2ec] insns:[
	<0x319: %1002 = PHI(%233, %217)>
	<0x321: %235 = MLOAD(#40)>
	<0x324: %236 = SUB(%1002, %235)>
	<0x326: RETURN(%235, %236)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x9b7 num_insns:25 in: [0x297] insns:[
	<0x9bb: %646 = SLOAD(#6)>
	<0x9c1: %649 = AND(#1, %646)>
	<0x9c2: %650 = ISZERO(%649)>
	<0x9c6: %652 = MUL(#100, %650)>
	<0x9c7: %653 = SUB(%652, #1)>
	<0x9c8: %654 = AND(%653, %646)>
	<0x9cc: %656 = DIV(%654, #2)>
	<0x9d0: %658 = ADD(#1f, %656)>
	<0x9d5: %660 = DIV(%658, #20)>
	<0x9d6: %661 = MUL(%660, #20)>
	<0x9d9: %663 = ADD(#20, %661)>
	<0x9dc: %665 = MLOAD(#40)>
	<0x9df: %666 = ADD(%665, %663)>
	<0x9e2: MSTORE(#40, %666)>
	<0x9e9: MSTORE(%665, %656)>
	<0x9ec: %669 = ADD(#20, %665)>
	<0x9ef: %670 = SLOAD(#6)>
	<0x9f5: %673 = AND(#1, %670)>
	<0x9f6: %674 = ISZERO(%673)>
	<0x9fa: %676 = MUL(#100, %674)>
	<0x9fb: %677 = SUB(%676, #1)>
	<0x9fc: %678 = AND(%677, %670)>
	<0xa00: %680 = DIV(%678, #2)>
	<0xa02: %681 = ISZERO(%680)>
	<0xa06: JUMPI(#a4d, %681)>
] fallthrough:0xa07 jumps:[0x2ac]>
<SSABasicBlock offset:0xa07 num_insns:2 in: [0x9b7] insns:[
	<0xa0a: %684 = LT(#1f, %680)>
	<0xa0e: JUMPI(#a22, %684)>
] fallthrough:0xa0f jumps:[0xa22]>
<SSABasicBlock offset:0xa0f num_insns:5 in: [0xa07] insns:[
	<0xa14: %687 = SLOAD(#6)>
	<0xa15: %688 = DIV(%687, #100)>
	<0xa16: %689 = MUL(%688, #100)>
	<0xa18: MSTORE(%669, %689)>
	<0xa21: JUMP(#a4d)>
] fallthrough:None jumps:[0x2ac]>
<SSABasicBlock offset:0xa22 num_insns:3 in: [0xa07] insns:[
	<0xa24: %693 = ADD(%669, %680)>
	<0xa29: MSTORE(#0, #6)>
	<0xa2e: %697 = SHA3(#0, #20)>
] fallthrough:0xa30 jumps:None>
<SSABasicBlock offset:0xa30 num_insns:8 in: [0xa30,0xa22] insns:[
	<0xa30: %1010 = PHI(%700, %697)>
	<0xa30: %1011 = PHI(%702, %669)>
	<0xa32: %698 = SLOAD(%1010)>
	<0xa34: MSTORE(%1011, %698)>
	<0xa38: %700 = ADD(#1, %1010)>
	<0xa3c: %702 = ADD(#20, %1011)>
	<0xa3f: %703 = GT(%693, %702)>
	<0xa43: JUMPI(#a30, %703)>
] fallthrough:0x2ac jumps:[0xa30]>>

<SSAFunction name:allowance(address,address);remove_good(uint256[],bytes8,bool) hash:0xdd62ed3e offset:0x51e num_blocks:5 blocks:<SSABasicBlock offset:0x51e num_insns:3 in: [] insns:[
	<0x51f: %385 = CALLVALUE()>
	<0x521: %386 = ISZERO(%385)>
	<0x525: JUMPI(#52a, %386)>
] fallthrough:0x526 jumps:[0x52a]>
<SSABasicBlock offset:0x526 num_insns:1 in: [0x51e] insns:[
	<0x529: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x52a num_insns:3 in: [0x51e] insns:[
	<0x539: %394 = CALLDATALOAD(#4)    // ADDRESS>
	<0x559: %399 = CALLDATALOAD(#24)    // ADDRESS>
	<0x57e: JUMP(#f3e)>
] fallthrough:None jumps:[0xf3e]>
<SSABasicBlock offset:0x57f num_insns:6 in: [0xf3e] insns:[
	<0x582: %406 = MLOAD(#40)>
	<0x586: MSTORE(%406, %997)>
	<0x589: %408 = ADD(#20, %406)>
	<0x58f: %410 = MLOAD(#40)>
	<0x592: %411 = SUB(%408, %410)>
	<0x594: RETURN(%410, %411)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xf3e num_insns:8 in: [0x52a] insns:[
	<0xf73: MSTORE(#0, %394)>
	<0xf79: MSTORE(#20, #1)>
	<0xf7f: %985 = SHA3(#0, #40)>
	<0xfb0: MSTORE(#0, %399)>
	<0xfb6: MSTORE(#20, %985)>
	<0xfbc: %996 = SHA3(#0, #40)>
	<0xfbd: %997 = SLOAD(%996)>
	<0xfc4: JUMP(#57f)>
] fallthrough:None jumps:[0x57f]>>

<SSAFunction name:approve(address,uint256) hash:0x95ea7b3 offset:0x151 num_blocks:5 blocks:<SSABasicBlock offset:0x151 num_insns:3 in: [] insns:[
	<0x152: %97 = CALLVALUE()>
	<0x154: %98 = ISZERO(%97)>
	<0x158: JUMPI(#15d, %98)>
] fallthrough:0x159 jumps:[0x15d]>
<SSABasicBlock offset:0x159 num_insns:1 in: [0x151] insns:[
	<0x15c: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x15d num_insns:3 in: [0x151] insns:[
	<0x16c: %106 = CALLDATALOAD(#4)    // ADDRESS>
	<0x18c: %111 = CALLDATALOAD(#24)>
	<0x19b: JUMP(#633)>
] fallthrough:None jumps:[0x633]>
<SSABasicBlock offset:0x19c num_insns:8 in: [0x633] insns:[
	<0x19f: %116 = MLOAD(#40)>
	<0x1a2: %117 = ISZERO(#1)>
	<0x1a5: %120 = ISZERO(%117)>
	<0x1a7: MSTORE(%116, %120)>
	<0x1aa: %122 = ADD(#20, %116)>
	<0x1b0: %124 = MLOAD(#40)>
	<0x1b3: %125 = SUB(%122, %124)>
	<0x1b5: RETURN(%124, %125)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x633 num_insns:16 in: [0x15d] insns:[
	<0x63b: %479 = CALLER()    // ADDRESS>
	<0x669: MSTORE(#0, %479)>
	<0x66f: MSTORE(#20, #1)>
	<0x675: %489 = SHA3(#0, #40)>
	<0x6a6: MSTORE(#0, %106)>
	<0x6ac: MSTORE(#20, %489)>
	<0x6b2: %500 = SHA3(#0, #40)>
	<0x6b5: SSTORE(%500, %111)>
	<0x6ce: %503 = CALLER()    // ADDRESS>
	<0x709: %508 = MLOAD(#40)>
	<0x70d: MSTORE(%508, %111)>
	<0x710: %510 = ADD(#20, %508)>
	<0x716: %512 = MLOAD(#40)>
	<0x719: %513 = SUB(%510, %512)>
	<0x71b: LOG3(%512, %513, #8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, %503, %106)>
	<0x724: JUMP(#19c)>
] fallthrough:None jumps:[0x19c]>>

<SSAFunction name:decimals() hash:0x313ce567 offset:0x266 num_blocks:4 blocks:<SSABasicBlock offset:0x266 num_insns:3 in: [] insns:[
	<0x267: %173 = CALLVALUE()>
	<0x269: %174 = ISZERO(%173)>
	<0x26d: JUMPI(#272, %174)>
] fallthrough:0x26e jumps:[0x9a4]>
<SSABasicBlock offset:0x26e num_insns:1 in: [0x266] insns:[
	<0x271: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x27b num_insns:8 in: [0x9a4] insns:[
	<0x27e: %180 = MLOAD(#40)>
	<0x283: %182 = AND(#ff, %644)>
	<0x286: %184 = AND(#ff, %182)>
	<0x288: MSTORE(%180, %184)>
	<0x28b: %186 = ADD(#20, %180)>
	<0x291: %188 = MLOAD(#40)>
	<0x294: %189 = SUB(%186, %188)>
	<0x296: RETURN(%188, %189)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x9a4 num_insns:3 in: [0x266] insns:[
	<0x9aa: %639 = SLOAD(#4)>
	<0x9b4: %644 = AND(#ff, %639)>
	<0x9b6: JUMP(#27b)>
] fallthrough:None jumps:[0x27b]>>

<SSAFunction name:name() hash:0x6fdde03 offset:0xc1 num_blocks:13 blocks:<SSABasicBlock offset:0xc1 num_insns:3 in: [] insns:[
	<0xc2: %50 = CALLVALUE()>
	<0xc4: %51 = ISZERO(%50)>
	<0xc8: JUMPI(#cd, %51)>
] fallthrough:0xc9 jumps:[0x595]>
<SSABasicBlock offset:0xc9 num_insns:1 in: [0xc1] insns:[
	<0xcc: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xd6 num_insns:9 in: [0x595,0x60e,0x5ed] insns:[
	<0xd9: %57 = MLOAD(#40)>
	<0xde: %59 = ADD(#20, %57)>
	<0xe1: %60 = SUB(%59, %57)>
	<0xe3: MSTORE(%57, %60)>
	<0xe7: %61 = MLOAD(%432)>
	<0xe9: MSTORE(%59, %61)>
	<0xec: %63 = ADD(#20, %59)>
	<0xf0: %64 = MLOAD(%432)>
	<0xf4: %66 = ADD(#20, %432)>
] fallthrough:0xfb jumps:None>
<SSABasicBlock offset:0xfb num_insns:4 in: [0x104,0xd6] insns:[
	<0xfb: %998 = PHI(%75, #0)>
	<0xfe: %68 = LT(%998, %64)>
	<0xff: %69 = ISZERO(%68)>
	<0x103: JUMPI(#116, %69)>
] fallthrough:0x104 jumps:[0x116]>
<SSABasicBlock offset:0x104 num_insns:6 in: [0xfb] insns:[
	<0x106: %71 = ADD(%66, %998)>
	<0x107: %72 = MLOAD(%71)>
	<0x10a: %73 = ADD(%63, %998)>
	<0x10b: MSTORE(%73, %72)>
	<0x10f: %75 = ADD(%998, #20)>
	<0x115: JUMP(#fb)>
] fallthrough:None jumps:[0xfb]>
<SSABasicBlock offset:0x116 num_insns:4 in: [0xfb] insns:[
	<0x11f: %77 = ADD(%64, %63)>
	<0x123: %79 = AND(#1f, %64)>
	<0x125: %80 = ISZERO(%79)>
	<0x129: JUMPI(#143, %80)>
] fallthrough:0x12a jumps:[0x143]>
<SSABasicBlock offset:0x12a num_insns:9 in: [0x116] insns:[
	<0x12c: %82 = SUB(%77, %79)>
	<0x12e: %83 = MLOAD(%82)>
	<0x134: %86 = SUB(#20, %79)>
	<0x138: %88 = EXP(#100, %86)>
	<0x139: %89 = SUB(%88, #1)>
	<0x13a: %90 = NOT(%89)>
	<0x13b: %91 = AND(%90, %83)>
	<0x13d: MSTORE(%82, %91)>
	<0x140: %93 = ADD(#20, %82)>
] fallthrough:0x143 jumps:None>
<SSABasicBlock offset:0x143 num_insns:4 in: [0x116,0x12a] insns:[
	<0x143: %999 = PHI(%93, %77)>
	<0x14b: %95 = MLOAD(#40)>
	<0x14e: %96 = SUB(%999, %95)>
	<0x150: RETURN(%95, %96)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x595 num_insns:25 in: [0xc1] insns:[
	<0x599: %413 = SLOAD(#3)>
	<0x59f: %416 = AND(#1, %413)>
	<0x5a0: %417 = ISZERO(%416)>
	<0x5a4: %419 = MUL(#100, %417)>
	<0x5a5: %420 = SUB(%419, #1)>
	<0x5a6: %421 = AND(%420, %413)>
	<0x5aa: %423 = DIV(%421, #2)>
	<0x5ae: %425 = ADD(#1f, %423)>
	<0x5b3: %427 = DIV(%425, #20)>
	<0x5b4: %428 = MUL(%427, #20)>
	<0x5b7: %430 = ADD(#20, %428)>
	<0x5ba: %432 = MLOAD(#40)>
	<0x5bd: %433 = ADD(%432, %430)>
	<0x5c0: MSTORE(#40, %433)>
	<0x5c7: MSTORE(%432, %423)>
	<0x5ca: %436 = ADD(#20, %432)>
	<0x5cd: %437 = SLOAD(#3)>
	<0x5d3: %440 = AND(#1, %437)>
	<0x5d4: %441 = ISZERO(%440)>
	<0x5d8: %443 = MUL(#100, %441)>
	<0x5d9: %444 = SUB(%443, #1)>
	<0x5da: %445 = AND(%444, %437)>
	<0x5de: %447 = DIV(%445, #2)>
	<0x5e0: %448 = ISZERO(%447)>
	<0x5e4: JUMPI(#62b, %448)>
] fallthrough:0x5e5 jumps:[0xd6]>
<SSABasicBlock offset:0x5e5 num_insns:2 in: [0x595] insns:[
	<0x5e8: %451 = LT(#1f, %447)>
	<0x5ec: JUMPI(#600, %451)>
] fallthrough:0x5ed jumps:[0x600]>
<SSABasicBlock offset:0x5ed num_insns:5 in: [0x5e5] insns:[
	<0x5f2: %454 = SLOAD(#3)>
	<0x5f3: %455 = DIV(%454, #100)>
	<0x5f4: %456 = MUL(%455, #100)>
	<0x5f6: MSTORE(%436, %456)>
	<0x5ff: JUMP(#62b)>
] fallthrough:None jumps:[0xd6]>
<SSABasicBlock offset:0x600 num_insns:3 in: [0x5e5] insns:[
	<0x602: %460 = ADD(%436, %447)>
	<0x607: MSTORE(#0, #3)>
	<0x60c: %464 = SHA3(#0, #20)>
] fallthrough:0x60e jumps:None>
<SSABasicBlock offset:0x60e num_insns:8 in: [0x600,0x60e] insns:[
	<0x60e: %1006 = PHI(%464, %467)>
	<0x60e: %1007 = PHI(%469, %436)>
	<0x610: %465 = SLOAD(%1006)>
	<0x612: MSTORE(%1007, %465)>
	<0x616: %467 = ADD(#1, %1006)>
	<0x61a: %469 = ADD(#20, %1007)>
	<0x61d: %470 = GT(%460, %469)>
	<0x621: JUMPI(#60e, %470)>
] fallthrough:0xd6 jumps:[0x60e]>>

<SSAFunction name:balanceOf(address) hash:0x70a08231 offset:0x327 num_blocks:5 blocks:<SSABasicBlock offset:0x327 num_insns:3 in: [] insns:[
	<0x328: %237 = CALLVALUE()>
	<0x32a: %238 = ISZERO(%237)>
	<0x32e: JUMPI(#333, %238)>
] fallthrough:0x32f jumps:[0x333]>
<SSABasicBlock offset:0x32f num_insns:1 in: [0x327] insns:[
	<0x332: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0x333 num_insns:2 in: [0x327] insns:[
	<0x342: %246 = CALLDATALOAD(#4)    // ADDRESS>
	<0x367: JUMP(#a55)>
] fallthrough:None jumps:[0xa55]>
<SSABasicBlock offset:0x368 num_insns:6 in: [0xa55] insns:[
	<0x36b: %253 = MLOAD(#40)>
	<0x36f: MSTORE(%253, %721)>
	<0x372: %255 = ADD(#20, %253)>
	<0x378: %257 = MLOAD(#40)>
	<0x37b: %258 = SUB(%255, %257)>
	<0x37d: RETURN(%257, %258)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xa55 num_insns:5 in: [0x333] insns:[
	<0xa89: MSTORE(#0, %246)>
	<0xa8f: MSTORE(#20, #0)>
	<0xa95: %720 = SHA3(#0, #40)>
	<0xa96: %721 = SLOAD(%720)>
	<0xa9c: JUMP(#368)>
] fallthrough:None jumps:[0x368]>>

<SSAFunction name:_fallthrough hash:0x0 offset:0xd num_blocks:14 blocks:<SSABasicBlock offset:0xd num_insns:5 in: [] insns:[
	<0xf: %7 = CALLDATALOAD(#0)>
	<0x2f: %9 = DIV(%7, #100000000000000000000000000000000000000000000000000000000)>
	<0x35: %11 = AND(#ffffffff, %9)>
	<0x3c: %13 = EQ(#6fdde03, %11)>
	<0x0: ICONDCALL(name(), %13)>
] fallthrough:0x41 jumps:None>
<SSABasicBlock offset:0x41 num_insns:2 in: [0xd] insns:[
	<0x47: %16 = EQ(#95ea7b3, %11)>
	<0x0: ICONDCALL(approve(address,uint256), %16)>
] fallthrough:0x4c jumps:None>
<SSABasicBlock offset:0x4c num_insns:2 in: [0x41] insns:[
	<0x52: %19 = EQ(#18160ddd, %11)>
	<0x0: ICONDCALL(totalSupply(), %19)>
] fallthrough:0x57 jumps:None>
<SSABasicBlock offset:0x57 num_insns:2 in: [0x4c] insns:[
	<0x5d: %22 = EQ(#23b872dd, %11)>
	<0x0: ICONDCALL(transferFrom(address,address,uint256), %22)>
] fallthrough:0x62 jumps:None>
<SSABasicBlock offset:0x62 num_insns:2 in: [0x57] insns:[
	<0x68: %25 = EQ(#313ce567, %11)>
	<0x0: ICONDCALL(decimals(), %25)>
] fallthrough:0x6d jumps:None>
<SSABasicBlock offset:0x6d num_insns:2 in: [0x62] insns:[
	<0x73: %28 = EQ(#54fd4d50, %11)>
	<0x0: ICONDCALL(version(), %28)>
] fallthrough:0x78 jumps:None>
<SSABasicBlock offset:0x78 num_insns:2 in: [0x6d] insns:[
	<0x7e: %31 = EQ(#70a08231, %11)>
	<0x0: ICONDCALL(balanceOf(address), %31)>
] fallthrough:0x83 jumps:None>
<SSABasicBlock offset:0x83 num_insns:2 in: [0x78] insns:[
	<0x89: %34 = EQ(#95d89b41, %11)>
	<0x0: ICONDCALL(symbol(), %34)>
] fallthrough:0x8e jumps:None>
<SSABasicBlock offset:0x8e num_insns:2 in: [0x83] insns:[
	<0x94: %37 = EQ(#a9059cbb, %11)>
	<0x0: ICONDCALL(transfer(address,uint256), %37)>
] fallthrough:0x99 jumps:None>
<SSABasicBlock offset:0x99 num_insns:2 in: [0x8e] insns:[
	<0x9f: %40 = EQ(#cae9ca51, %11)>
	<0x0: ICONDCALL(approveAndCall(address,uint256,bytes), %40)>
] fallthrough:0xa4 jumps:None>
<SSABasicBlock offset:0xa4 num_insns:2 in: [0x99] insns:[
	<0xaa: %43 = EQ(#dd62ed3e, %11)>
	<0x0: ICONDCALL(allowance(address,address);remove_good(uint256[],bytes8,bool), %43)>
] fallthrough:0xaf jumps:None>
<SSABasicBlock offset:0xaf num_insns:3 in: [0x0,0xa4] insns:[
	<0xb0: %45 = CALLVALUE()>
	<0xb2: %46 = ISZERO(%45)>
	<0xb6: JUMPI(#bb, %46)>
] fallthrough:0xb7 jumps:[0xbb]>
<SSABasicBlock offset:0xb7 num_insns:1 in: [0xaf] insns:[
	<0xba: REVERT(#0, #0)>
] fallthrough:None jumps:None>
<SSABasicBlock offset:0xbb num_insns:1 in: [0xaf] insns:[
	<0xc0: REVERT(#0, #0)>
] fallthrough:None jumps:None>>


Identified Functions:
	_dispatch argument offsets:[]
	transferFrom(address,address,uint256) argument offsets:[(4, 36), (36, 68), (68, 100)]
	symbol() argument offsets:[]
	transfer(address,uint256) argument offsets:[(4, 36), (36, 68)]
	totalSupply() argument offsets:[]
	approveAndCall(address,uint256,bytes) argument offsets:[(4, 36), (36, 68), (68, 100)]
	version() argument offsets:[]
	allowance(address,address);remove_good(uint256[],bytes8,bool) argument offsets:[(4, 36), (36, 68)]
	approve(address,uint256) argument offsets:[(4, 36), (36, 68)]
	decimals() argument offsets:[]
	name() argument offsets:[]
	balanceOf(address) argument offsets:[(4, 36)]
	_fallthrough argument offsets:[(0, 32)]

Storage Locations: [2, 3, 4, 5, 6]
Memory Locations: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Analyzing Memory Location: 33

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 34

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 35

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 36

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 37

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 38

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 39

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 40

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 41

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 42

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 43

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 44

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 45

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 46

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 47

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 48

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 49

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 50

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 51

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 52

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 53

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 54

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 55

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 56

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 57

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 58

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 59

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 60

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 61

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 62

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 63

	0x76c: %528 = SHA3(#0, #40)
	0x7b6: %545 = SHA3(#0, #40)
	0x7f3: %557 = SHA3(#0, #40)
	0x847: %577 = SHA3(#0, #40)
	0x893: %591 = SHA3(#0, #40)
	0x8e0: %606 = SHA3(#0, #40)
	0x91d: %618 = SHA3(#0, #40)
	0xb7c: %798 = SHA3(#0, #40)
	0xbcf: %819 = SHA3(#0, #40)
	0xc1b: %833 = SHA3(#0, #40)
	0xce3: %866 = SHA3(#0, #40)
	0xd20: %877 = SHA3(#0, #40)
	0xf7f: %985 = SHA3(#0, #40)
	0xfbc: %996 = SHA3(#0, #40)
	0x675: %489 = SHA3(#0, #40)
	0x6b2: %500 = SHA3(#0, #40)
	0xa95: %720 = SHA3(#0, #40)



Analyzing Memory Location: 64

	0x4: MSTORE(#40, #80)
	0x24f: %163 = MLOAD(#40)
	0x260: %171 = MLOAD(#40)
	0x97d: %628 = MLOAD(#40)
	0x98a: %632 = MLOAD(#40)
	0x396: %266 = MLOAD(#40)
	0x408: %304 = MLOAD(#40)
	0xac2: %742 = MLOAD(#40)
	0xac8: MSTORE(#40, %743)
	0x45c: %325 = MLOAD(#40)
	0x46d: %333 = MLOAD(#40)
	0xc7b: %844 = MLOAD(#40)
	0xc88: %848 = MLOAD(#40)
	0x1ce: %133 = MLOAD(#40)
	0x1db: %137 = MLOAD(#40)
	0x4d7: %367 = MLOAD(#40)
	0x4dd: MSTORE(#40, %368)
	0x507: %375 = MLOAD(#40)
	0x518: %383 = MLOAD(#40)
	0xd77: %885 = MLOAD(#40)
	0xd84: %889 = MLOAD(#40)
	0xda3: %894 = MLOAD(#40)
	0xdf7: %902 = MLOAD(#40)
	0xe23: %910 = MLOAD(#40)
	0xf1b: %963 = MLOAD(#40)
	0x2af: %197 = MLOAD(#40)
	0x321: %235 = MLOAD(#40)
	0x9dc: %665 = MLOAD(#40)
	0x9e2: MSTORE(#40, %666)
	0x582: %406 = MLOAD(#40)
	0x58f: %410 = MLOAD(#40)
	0x19f: %116 = MLOAD(#40)
	0x1b0: %124 = MLOAD(#40)
	0x709: %508 = MLOAD(#40)
	0x716: %512 = MLOAD(#40)
	0x27e: %180 = MLOAD(#40)
	0x291: %188 = MLOAD(#40)
	0xd9: %57 = MLOAD(#40)
	0x14b: %95 = MLOAD(#40)
	0x5ba: %432 = MLOAD(#40)
	0x5c0: MSTORE(#40, %433)
	0x36b: %253 = MLOAD(#40)
	0x378: %257 = MLOAD(#40)



Function _dispatch storage:
Function transferFrom(address,address,uint256) storage:
Function symbol() storage:
	Analyzing Storage Location: 5
		0xaa1: %723 = SLOAD(#5)
		0xad5: %747 = SLOAD(#5)
		0xafa: %764 = SLOAD(#5)


Function transfer(address,uint256) storage:
Function totalSupply() storage:
	Analyzing Storage Location: 2
		0x728: %516 = SLOAD(#2)


Function approveAndCall(address,uint256,bytes) storage:
Function version() storage:
	Analyzing Storage Location: 6
		0x9bb: %646 = SLOAD(#6)
		0x9ef: %670 = SLOAD(#6)
		0xa14: %687 = SLOAD(#6)


Function allowance(address,address);remove_good(uint256[],bytes8,bool) storage:
Function approve(address,uint256) storage:
Function decimals() storage:
	Analyzing Storage Location: 4
		0x9aa: %639 = SLOAD(#4)


Function name() storage:
	Analyzing Storage Location: 3
		0x599: %413 = SLOAD(#3)
		0x5cd: %437 = SLOAD(#3)
		0x5f2: %454 = SLOAD(#3)


Function balanceOf(address) storage:
Function _fallthrough storage:
[+] Contract can not send ether.
[+] Contract calls:
	%967 = CALL(%966, %344, #0, %963, %964, %963, #0)
		Gas: %966			%966 = GAS()
		To: %344 			%344 = CALLDATALOAD(#4)    // ADDRESS
		Value: #0
		In Data Offset: %963		%963 = MLOAD(#40)
		In Data Size: %964		%964 = SUB(%1016, %963)
		Out Data Offset: %963		%963 = MLOAD(#40)
		Out Data Size: #0

[+] Wrote _dispatch to output/_dispatch.png
[+] Wrote transferFrom(address,address,uint256) to output/transferFrom(address,address,uint256).png
[+] Wrote symbol() to output/symbol().png
[+] Wrote transfer(address,uint256) to output/transfer(address,uint256).png
[+] Wrote totalSupply() to output/totalSupply().png
[+] Wrote approveAndCall(address,uint256,bytes) to output/approveAndCall(address,uint256,bytes).png
[+] Wrote version() to output/version().png
[+] Wrote allowance(address,address);remove_good(uint256[],bytes8,bool) to output/allowance(address,address);remove_good(uint256[],bytes8,bool).png
[+] Wrote approve(address,uint256) to output/approve(address,uint256).png
[+] Wrote decimals() to output/decimals().png
[+] Wrote name() to output/name().png
[+] Wrote balanceOf(address) to output/balanceOf(address).png
[+] Wrote _fallthrough to output/_fallthrough.png
